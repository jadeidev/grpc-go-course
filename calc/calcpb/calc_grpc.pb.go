// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: calc/calcpb/calc.proto

package calcpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CalcService_Calc_FullMethodName            = "/calc.CalcService/Calc"
	CalcService_CalcPrimeNumber_FullMethodName = "/calc.CalcService/CalcPrimeNumber"
	CalcService_CalcAverage_FullMethodName     = "/calc.CalcService/CalcAverage"
)

// CalcServiceClient is the client API for CalcService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CalcServiceClient interface {
	Calc(ctx context.Context, in *CalcRequest, opts ...grpc.CallOption) (*CalcResponse, error)
	CalcPrimeNumber(ctx context.Context, in *PrimeNumberRequest, opts ...grpc.CallOption) (CalcService_CalcPrimeNumberClient, error)
	CalcAverage(ctx context.Context, opts ...grpc.CallOption) (CalcService_CalcAverageClient, error)
}

type calcServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCalcServiceClient(cc grpc.ClientConnInterface) CalcServiceClient {
	return &calcServiceClient{cc}
}

func (c *calcServiceClient) Calc(ctx context.Context, in *CalcRequest, opts ...grpc.CallOption) (*CalcResponse, error) {
	out := new(CalcResponse)
	err := c.cc.Invoke(ctx, CalcService_Calc_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calcServiceClient) CalcPrimeNumber(ctx context.Context, in *PrimeNumberRequest, opts ...grpc.CallOption) (CalcService_CalcPrimeNumberClient, error) {
	stream, err := c.cc.NewStream(ctx, &CalcService_ServiceDesc.Streams[0], CalcService_CalcPrimeNumber_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &calcServiceCalcPrimeNumberClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CalcService_CalcPrimeNumberClient interface {
	Recv() (*PrimeNumberResponse, error)
	grpc.ClientStream
}

type calcServiceCalcPrimeNumberClient struct {
	grpc.ClientStream
}

func (x *calcServiceCalcPrimeNumberClient) Recv() (*PrimeNumberResponse, error) {
	m := new(PrimeNumberResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *calcServiceClient) CalcAverage(ctx context.Context, opts ...grpc.CallOption) (CalcService_CalcAverageClient, error) {
	stream, err := c.cc.NewStream(ctx, &CalcService_ServiceDesc.Streams[1], CalcService_CalcAverage_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &calcServiceCalcAverageClient{stream}
	return x, nil
}

type CalcService_CalcAverageClient interface {
	Send(*AverageRequest) error
	CloseAndRecv() (*AverageResponse, error)
	grpc.ClientStream
}

type calcServiceCalcAverageClient struct {
	grpc.ClientStream
}

func (x *calcServiceCalcAverageClient) Send(m *AverageRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *calcServiceCalcAverageClient) CloseAndRecv() (*AverageResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(AverageResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CalcServiceServer is the server API for CalcService service.
// All implementations must embed UnimplementedCalcServiceServer
// for forward compatibility
type CalcServiceServer interface {
	Calc(context.Context, *CalcRequest) (*CalcResponse, error)
	CalcPrimeNumber(*PrimeNumberRequest, CalcService_CalcPrimeNumberServer) error
	CalcAverage(CalcService_CalcAverageServer) error
	mustEmbedUnimplementedCalcServiceServer()
}

// UnimplementedCalcServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCalcServiceServer struct {
}

func (UnimplementedCalcServiceServer) Calc(context.Context, *CalcRequest) (*CalcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Calc not implemented")
}
func (UnimplementedCalcServiceServer) CalcPrimeNumber(*PrimeNumberRequest, CalcService_CalcPrimeNumberServer) error {
	return status.Errorf(codes.Unimplemented, "method CalcPrimeNumber not implemented")
}
func (UnimplementedCalcServiceServer) CalcAverage(CalcService_CalcAverageServer) error {
	return status.Errorf(codes.Unimplemented, "method CalcAverage not implemented")
}
func (UnimplementedCalcServiceServer) mustEmbedUnimplementedCalcServiceServer() {}

// UnsafeCalcServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CalcServiceServer will
// result in compilation errors.
type UnsafeCalcServiceServer interface {
	mustEmbedUnimplementedCalcServiceServer()
}

func RegisterCalcServiceServer(s grpc.ServiceRegistrar, srv CalcServiceServer) {
	s.RegisterService(&CalcService_ServiceDesc, srv)
}

func _CalcService_Calc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CalcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalcServiceServer).Calc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CalcService_Calc_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalcServiceServer).Calc(ctx, req.(*CalcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CalcService_CalcPrimeNumber_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PrimeNumberRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CalcServiceServer).CalcPrimeNumber(m, &calcServiceCalcPrimeNumberServer{stream})
}

type CalcService_CalcPrimeNumberServer interface {
	Send(*PrimeNumberResponse) error
	grpc.ServerStream
}

type calcServiceCalcPrimeNumberServer struct {
	grpc.ServerStream
}

func (x *calcServiceCalcPrimeNumberServer) Send(m *PrimeNumberResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _CalcService_CalcAverage_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CalcServiceServer).CalcAverage(&calcServiceCalcAverageServer{stream})
}

type CalcService_CalcAverageServer interface {
	SendAndClose(*AverageResponse) error
	Recv() (*AverageRequest, error)
	grpc.ServerStream
}

type calcServiceCalcAverageServer struct {
	grpc.ServerStream
}

func (x *calcServiceCalcAverageServer) SendAndClose(m *AverageResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *calcServiceCalcAverageServer) Recv() (*AverageRequest, error) {
	m := new(AverageRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CalcService_ServiceDesc is the grpc.ServiceDesc for CalcService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CalcService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "calc.CalcService",
	HandlerType: (*CalcServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Calc",
			Handler:    _CalcService_Calc_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CalcPrimeNumber",
			Handler:       _CalcService_CalcPrimeNumber_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "CalcAverage",
			Handler:       _CalcService_CalcAverage_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "calc/calcpb/calc.proto",
}
